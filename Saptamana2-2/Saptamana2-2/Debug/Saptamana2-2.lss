
Saptamana2-2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000023a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000007de  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006ac  00000000  00000000  00000af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c6  00000000  00000000  000011a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00001568  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000382  00000000  00000000  0000169c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000024d  00000000  00000000  00001a1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001c6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 c9 00 	jmp	0x192	; 0x192 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ec       	ldi	r30, 0xC6	; 198
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 36       	cpi	r26, 0x61	; 97
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  8a:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <A8>:
		counter++;
		sendString(text);
}

void A8(void)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	1f 92       	push	r1
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
	uint8_t byte_read;
	byte_read = UART_ReceiveByte();
  9c:	0e 94 b3 00 	call	0x166	; 0x166 <UART_ReceiveByte>
  a0:	89 83       	std	Y+1, r24	; 0x01
	sendCharacter(byte_read);
  a2:	89 81       	ldd	r24, Y+1	; 0x01
  a4:	0e 94 98 00 	call	0x130	; 0x130 <sendCharacter>
}
  a8:	00 00       	nop
  aa:	0f 90       	pop	r0
  ac:	df 91       	pop	r29
  ae:	cf 91       	pop	r28
  b0:	08 95       	ret

000000b2 <main>:

int main(void)
{
  b2:	cf 93       	push	r28
  b4:	df 93       	push	r29
  b6:	cd b7       	in	r28, 0x3d	; 61
  b8:	de b7       	in	r29, 0x3e	; 62
	initUART();
  ba:	0e 94 69 00 	call	0xd2	; 0xd2 <initUART>
	sei();
  be:	78 94       	sei
    while (1) 
    {
		if(flag)
  c0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  c4:	88 23       	and	r24, r24
  c6:	e1 f3       	breq	.-8      	; 0xc0 <main+0xe>
		{
			A8();
  c8:	0e 94 49 00 	call	0x92	; 0x92 <A8>
			flag = 0;
  cc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
    }
  d0:	f7 cf       	rjmp	.-18     	; 0xc0 <main+0xe>

000000d2 <initUART>:
	uint16_t len = strlen(string), i;
	for(i = 0; i < len; i++)
	{
		sendCharacter(string[i]);
	}
}
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	00 d0       	rcall	.+0      	; 0xd8 <initUART+0x6>
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	87 e0       	ldi	r24, 0x07	; 7
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	9a 83       	std	Y+2, r25	; 0x02
  e2:	89 83       	std	Y+1, r24	; 0x01
  e4:	81 e3       	ldi	r24, 0x31	; 49
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	22 e0       	ldi	r18, 0x02	; 2
  ea:	fc 01       	movw	r30, r24
  ec:	20 83       	st	Z, r18
  ee:	80 e4       	ldi	r24, 0x40	; 64
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	fc 01       	movw	r30, r24
  f4:	10 82       	st	Z, r1
  f6:	80 e4       	ldi	r24, 0x40	; 64
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	29 81       	ldd	r18, Y+1	; 0x01
  fc:	3a 81       	ldd	r19, Y+2	; 0x02
  fe:	23 2f       	mov	r18, r19
 100:	33 27       	eor	r19, r19
 102:	fc 01       	movw	r30, r24
 104:	20 83       	st	Z, r18
 106:	89 e2       	ldi	r24, 0x29	; 41
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	29 81       	ldd	r18, Y+1	; 0x01
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
 110:	8a e2       	ldi	r24, 0x2A	; 42
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	28 e9       	ldi	r18, 0x98	; 152
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
 11a:	80 e4       	ldi	r24, 0x40	; 64
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	26 e8       	ldi	r18, 0x86	; 134
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
 124:	00 00       	nop
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	df 91       	pop	r29
 12c:	cf 91       	pop	r28
 12e:	08 95       	ret

00000130 <sendCharacter>:
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	1f 92       	push	r1
 136:	cd b7       	in	r28, 0x3d	; 61
 138:	de b7       	in	r29, 0x3e	; 62
 13a:	89 83       	std	Y+1, r24	; 0x01
 13c:	00 00       	nop
 13e:	8b e2       	ldi	r24, 0x2B	; 43
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	fc 01       	movw	r30, r24
 144:	80 81       	ld	r24, Z
 146:	88 2f       	mov	r24, r24
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	80 72       	andi	r24, 0x20	; 32
 14c:	99 27       	eor	r25, r25
 14e:	89 2b       	or	r24, r25
 150:	b1 f3       	breq	.-20     	; 0x13e <sendCharacter+0xe>
 152:	8c e2       	ldi	r24, 0x2C	; 44
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	29 81       	ldd	r18, Y+1	; 0x01
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18
 15c:	00 00       	nop
 15e:	0f 90       	pop	r0
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <UART_ReceiveByte>:

uint8_t UART_ReceiveByte(void)
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	1f 92       	push	r1
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
	uint8_t ch;
	while(!(UCSRA & (1 << RXC)));
 170:	00 00       	nop
 172:	8b e2       	ldi	r24, 0x2B	; 43
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	fc 01       	movw	r30, r24
 178:	80 81       	ld	r24, Z
 17a:	88 23       	and	r24, r24
 17c:	d4 f7       	brge	.-12     	; 0x172 <UART_ReceiveByte+0xc>
	ch = UDR;
 17e:	8c e2       	ldi	r24, 0x2C	; 44
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	fc 01       	movw	r30, r24
 184:	80 81       	ld	r24, Z
 186:	89 83       	std	Y+1, r24	; 0x01
	return ch;
 188:	89 81       	ldd	r24, Y+1	; 0x01
}
 18a:	0f 90       	pop	r0
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <__vector_11>:

ISR(USART_RXC_vect)
{
 192:	1f 92       	push	r1
 194:	0f 92       	push	r0
 196:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	8f 93       	push	r24
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	cd b7       	in	r28, 0x3d	; 61
 1a6:	de b7       	in	r29, 0x3e	; 62
	flag = 1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ae:	00 00       	nop
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
