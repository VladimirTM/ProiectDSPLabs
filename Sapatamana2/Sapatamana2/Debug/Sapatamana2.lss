
Sapatamana2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000024a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000024a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000024a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c6  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000625  00000000  00000000  000009e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000347  00000000  00000000  0000100b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  00001354  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000326  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000260  00000000  00000000  000017c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00001a26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 bc 00 	jmp	0x178	; 0x178 <__vector_6>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 4f 00 	call	0x9e	; 0x9e <main>
  74:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_LED>:

// perioada de 100ms
// frecventa de 14.7456MHz, care va fi divizata in 64 de diviziuni pentru a incapea pe 16 biti

void init_LED(void)
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	DDRA |= 1;
  84:	8a e3       	ldi	r24, 0x3A	; 58
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	2a e3       	ldi	r18, 0x3A	; 58
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	f9 01       	movw	r30, r18
  8e:	20 81       	ld	r18, Z
  90:	21 60       	ori	r18, 0x01	; 1
  92:	fc 01       	movw	r30, r24
  94:	20 83       	st	Z, r18
}
  96:	00 00       	nop
  98:	df 91       	pop	r29
  9a:	cf 91       	pop	r28
  9c:	08 95       	ret

0000009e <main>:

int main(void)
{
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
	sei();
  a6:	78 94       	sei
	init_LED();
  a8:	0e 94 3e 00 	call	0x7c	; 0x7c <init_LED>
	init_clock();
  ac:	0e 94 5b 00 	call	0xb6	; 0xb6 <init_clock>
	A2();
  b0:	0e 94 ab 00 	call	0x156	; 0x156 <A2>
    while (1) 
    {
    }
  b4:	ff cf       	rjmp	.-2      	; 0xb4 <main+0x16>

000000b6 <init_clock>:
	if ((TIFR & (1 << 4))!= 0)
	{
		toggle();
		TIFR |= 1 << 4;
	}
}
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	00 d0       	rcall	.+0      	; 0xbc <init_clock+0x6>
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
  c0:	80 e8       	ldi	r24, 0x80	; 128
  c2:	90 e7       	ldi	r25, 0x70	; 112
  c4:	9a 83       	std	Y+2, r25	; 0x02
  c6:	89 83       	std	Y+1, r24	; 0x01
  c8:	8b e4       	ldi	r24, 0x4B	; 75
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	29 81       	ldd	r18, Y+1	; 0x01
  ce:	3a 81       	ldd	r19, Y+2	; 0x02
  d0:	23 2f       	mov	r18, r19
  d2:	33 27       	eor	r19, r19
  d4:	fc 01       	movw	r30, r24
  d6:	20 83       	st	Z, r18
  d8:	8a e4       	ldi	r24, 0x4A	; 74
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	29 81       	ldd	r18, Y+1	; 0x01
  de:	fc 01       	movw	r30, r24
  e0:	20 83       	st	Z, r18
  e2:	8f e4       	ldi	r24, 0x4F	; 79
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	fc 01       	movw	r30, r24
  e8:	10 82       	st	Z, r1
  ea:	8e e4       	ldi	r24, 0x4E	; 78
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	2c e0       	ldi	r18, 0x0C	; 12
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
  f4:	00 00       	nop
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <toggle>:
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 110:	89 2b       	or	r24, r25
 112:	71 f0       	breq	.+28     	; 0x130 <toggle+0x30>
 114:	8b e3       	ldi	r24, 0x3B	; 59
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	2b e3       	ldi	r18, 0x3B	; 59
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	21 60       	ori	r18, 0x01	; 1
 122:	fc 01       	movw	r30, r24
 124:	20 83       	st	Z, r18
 126:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 12a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 12e:	0f c0       	rjmp	.+30     	; 0x14e <toggle+0x4e>
 130:	8b e3       	ldi	r24, 0x3B	; 59
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	2b e3       	ldi	r18, 0x3B	; 59
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	f9 01       	movw	r30, r18
 13a:	20 81       	ld	r18, Z
 13c:	2e 7f       	andi	r18, 0xFE	; 254
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 14a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 14e:	00 00       	nop
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <A2>:

void A2(void)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= 1 << OCIE1A;
 15e:	89 e5       	ldi	r24, 0x59	; 89
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	29 e5       	ldi	r18, 0x59	; 89
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	f9 01       	movw	r30, r18
 168:	20 81       	ld	r18, Z
 16a:	20 61       	ori	r18, 0x10	; 16
 16c:	fc 01       	movw	r30, r24
 16e:	20 83       	st	Z, r18
}
 170:	00 00       	nop
 172:	df 91       	pop	r29
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <__vector_6>:

ISR(TIMER1_COMPA_vect)
{
 178:	1f 92       	push	r1
 17a:	0f 92       	push	r0
 17c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
	toggle();
 1a4:	0e 94 80 00 	call	0x100	; 0x100 <toggle>
 1a8:	00 00       	nop
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	ff 91       	pop	r31
 1b0:	ef 91       	pop	r30
 1b2:	bf 91       	pop	r27
 1b4:	af 91       	pop	r26
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	7f 91       	pop	r23
 1bc:	6f 91       	pop	r22
 1be:	5f 91       	pop	r21
 1c0:	4f 91       	pop	r20
 1c2:	3f 91       	pop	r19
 1c4:	2f 91       	pop	r18
 1c6:	0f 90       	pop	r0
 1c8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <_exit>:
 1d2:	f8 94       	cli

000001d4 <__stop_program>:
 1d4:	ff cf       	rjmp	.-2      	; 0x1d4 <__stop_program>
