
Sapatamana2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000001fe  00000292  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080006c  0080006c  0000029e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000841  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000071e  00000000  00000000  00000bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004cb  00000000  00000000  0000131b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  000017e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000386  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034d  00000000  00000000  00001d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  000020ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 b0 00 	jmp	0x160	; 0x160 <__vector_6>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ef       	ldi	r30, 0xFE	; 254
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  8a:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_digit>:
	init_clock();
	init_digit();
	TIMSK |= 1 << OCIE1A;
	while (1)
	{
	}
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	cd b7       	in	r28, 0x3d	; 61
  98:	de b7       	in	r29, 0x3e	; 62
  9a:	8a e3       	ldi	r24, 0x3A	; 58
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	fc 01       	movw	r30, r24
  a0:	80 81       	ld	r24, Z
  a2:	8a e3       	ldi	r24, 0x3A	; 58
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	fc 01       	movw	r30, r24
  aa:	20 83       	st	Z, r18
  ac:	00 00       	nop
  ae:	df 91       	pop	r29
  b0:	cf 91       	pop	r28
  b2:	08 95       	ret

000000b4 <display_digit>:
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	1f 92       	push	r1
  ba:	cd b7       	in	r28, 0x3d	; 61
  bc:	de b7       	in	r29, 0x3e	; 62
  be:	89 83       	std	Y+1, r24	; 0x01
  c0:	8b e3       	ldi	r24, 0x3B	; 59
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	29 81       	ldd	r18, Y+1	; 0x01
  c6:	22 2f       	mov	r18, r18
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	2e 59       	subi	r18, 0x9E	; 158
  cc:	3f 4f       	sbci	r19, 0xFF	; 255
  ce:	f9 01       	movw	r30, r18
  d0:	20 81       	ld	r18, Z
  d2:	fc 01       	movw	r30, r24
  d4:	20 83       	st	Z, r18
  d6:	00 00       	nop
  d8:	0f 90       	pop	r0
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <changeNumber>:
  e0:	cf 93       	push	r28
  e2:	df 93       	push	r29
  e4:	cd b7       	in	r28, 0x3d	; 61
  e6:	de b7       	in	r29, 0x3e	; 62
  e8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
  ec:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
  f0:	0e 94 5a 00 	call	0xb4	; 0xb4 <display_digit>
  f4:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
  f8:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__data_end+0x1>
 102:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
 106:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 10a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_end+0x1>
 10e:	0a 97       	sbiw	r24, 0x0a	; 10
 110:	21 f4       	brne	.+8      	; 0x11a <changeNumber+0x3a>
 112:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__data_end+0x1>
 116:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
 11a:	00 00       	nop
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <A4>:
	clear_digit();
	cli();
}

void A4(void)
{
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
	sei();
 12a:	78 94       	sei
	init_clock();
 12c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <init_clock>
	init_digit();
 130:	0e 94 49 00 	call	0x92	; 0x92 <init_digit>
	TIMSK |= 1 << OCIE1A;
 134:	89 e5       	ldi	r24, 0x59	; 89
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	29 e5       	ldi	r18, 0x59	; 89
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	f9 01       	movw	r30, r18
 13e:	20 81       	ld	r18, Z
 140:	20 61       	ori	r18, 0x10	; 16
 142:	fc 01       	movw	r30, r24
 144:	20 83       	st	Z, r18
	while (1)
	{
		if(flag)
 146:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 14a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 14e:	89 2b       	or	r24, r25
 150:	d1 f3       	breq	.-12     	; 0x146 <A4+0x24>
		{
			changeNumber();
 152:	0e 94 70 00 	call	0xe0	; 0xe0 <changeNumber>
			flag = 0;
 156:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 15a:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
	}
 15e:	f3 cf       	rjmp	.-26     	; 0x146 <A4+0x24>

00000160 <__vector_6>:
	clear_digit();
	cli();
}

ISR(TIMER1_COMPA_vect)
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	cd b7       	in	r28, 0x3d	; 61
 176:	de b7       	in	r29, 0x3e	; 62
	//changeNumber();
	flag = 1;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 180:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 184:	00 00       	nop
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	0f 90       	pop	r0
 190:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7fc05f>
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <main>:
{
	DDRA |= 1;
}

int main(void)
{
 19a:	cf 93       	push	r28
 19c:	df 93       	push	r29
 19e:	cd b7       	in	r28, 0x3d	; 61
 1a0:	de b7       	in	r29, 0x3e	; 62
	A4();
 1a2:	0e 94 91 00 	call	0x122	; 0x122 <A4>
 1a6:	80 e0       	ldi	r24, 0x00	; 0
 1a8:	90 e0       	ldi	r25, 0x00	; 0
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <init_clock>:
#include <util/delay.h>

int ok = 0;

void init_clock(void)
{
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <init_clock+0x6>
 1b6:	cd b7       	in	r28, 0x3d	; 61
 1b8:	de b7       	in	r29, 0x3e	; 62
	unsigned int N = 0x7080;
 1ba:	80 e8       	ldi	r24, 0x80	; 128
 1bc:	90 e7       	ldi	r25, 0x70	; 112
 1be:	9a 83       	std	Y+2, r25	; 0x02
 1c0:	89 83       	std	Y+1, r24	; 0x01
	OCR1AH = (N >> 8) & 0xFF;
 1c2:	8b e4       	ldi	r24, 0x4B	; 75
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	29 81       	ldd	r18, Y+1	; 0x01
 1c8:	3a 81       	ldd	r19, Y+2	; 0x02
 1ca:	23 2f       	mov	r18, r19
 1cc:	33 27       	eor	r19, r19
 1ce:	fc 01       	movw	r30, r24
 1d0:	20 83       	st	Z, r18
	OCR1AL = N & 0xFF;
 1d2:	8a e4       	ldi	r24, 0x4A	; 74
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	29 81       	ldd	r18, Y+1	; 0x01
 1d8:	fc 01       	movw	r30, r24
 1da:	20 83       	st	Z, r18
	TCCR1A=0x00;
 1dc:	8f e4       	ldi	r24, 0x4F	; 79
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	fc 01       	movw	r30, r24
 1e2:	10 82       	st	Z, r1
	TCCR1B=(1 << 3) | (1 << 2);
 1e4:	8e e4       	ldi	r24, 0x4E	; 78
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	2c e0       	ldi	r18, 0x0C	; 12
 1ea:	fc 01       	movw	r30, r24
 1ec:	20 83       	st	Z, r18
}
 1ee:	00 00       	nop
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	df 91       	pop	r29
 1f6:	cf 91       	pop	r28
 1f8:	08 95       	ret

000001fa <_exit>:
 1fa:	f8 94       	cli

000001fc <__stop_program>:
 1fc:	ff cf       	rjmp	.-2      	; 0x1fc <__stop_program>
