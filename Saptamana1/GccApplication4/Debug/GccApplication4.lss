
GccApplication4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000046e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000004e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  000004e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000514  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a1  00000000  00000000  00000578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c9  00000000  00000000  00000c19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e3  00000000  00000000  000011e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000014c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000034c  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000082  00000000  00000000  00001868  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000018ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  74:	0c 94 35 02 	jmp	0x46a	; 0x46a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <toggle>:
#include <util/delay.h>

int enable = 0;

void toggle()
{
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	if(enable == 1)
  84:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  88:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	71 f4       	brne	.+28     	; 0xac <toggle+0x30>
	{
		PORTB &= ~(1 << 1);
  90:	88 e3       	ldi	r24, 0x38	; 56
  92:	90 e0       	ldi	r25, 0x00	; 0
  94:	28 e3       	ldi	r18, 0x38	; 56
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	f9 01       	movw	r30, r18
  9a:	20 81       	ld	r18, Z
  9c:	2d 7f       	andi	r18, 0xFD	; 253
  9e:	fc 01       	movw	r30, r24
  a0:	20 83       	st	Z, r18
		enable = 0;
  a2:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
	else
	{
		PORTB |= 1 << 1;
		enable = 1;
	}
}
  aa:	0f c0       	rjmp	.+30     	; 0xca <toggle+0x4e>
		PORTB &= ~(1 << 1);
		enable = 0;
	}
	else
	{
		PORTB |= 1 << 1;
  ac:	88 e3       	ldi	r24, 0x38	; 56
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	28 e3       	ldi	r18, 0x38	; 56
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	f9 01       	movw	r30, r18
  b6:	20 81       	ld	r18, Z
  b8:	22 60       	ori	r18, 0x02	; 2
  ba:	fc 01       	movw	r30, r24
  bc:	20 83       	st	Z, r18
		enable = 1;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  c6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
}
  ca:	00 00       	nop
  cc:	df 91       	pop	r29
  ce:	cf 91       	pop	r28
  d0:	08 95       	ret

000000d2 <main>:

int main(void)
{
  d2:	cf 93       	push	r28
  d4:	df 93       	push	r29
  d6:	cd b7       	in	r28, 0x3d	; 61
  d8:	de b7       	in	r29, 0x3e	; 62
  da:	2e 97       	sbiw	r28, 0x0e	; 14
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	f8 94       	cli
  e0:	de bf       	out	0x3e, r29	; 62
  e2:	0f be       	out	0x3f, r0	; 63
  e4:	cd bf       	out	0x3d, r28	; 61
	DDRB &= ~(1 << 0);
  e6:	87 e3       	ldi	r24, 0x37	; 55
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	27 e3       	ldi	r18, 0x37	; 55
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	f9 01       	movw	r30, r18
  f0:	20 81       	ld	r18, Z
  f2:	2e 7f       	andi	r18, 0xFE	; 254
  f4:	fc 01       	movw	r30, r24
  f6:	20 83       	st	Z, r18
	DDRB |= 1 << 1;
  f8:	87 e3       	ldi	r24, 0x37	; 55
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	27 e3       	ldi	r18, 0x37	; 55
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	f9 01       	movw	r30, r18
 102:	20 81       	ld	r18, Z
 104:	22 60       	ori	r18, 0x02	; 2
 106:	fc 01       	movw	r30, r24
 108:	20 83       	st	Z, r18
    while (1) 
    {
		if((PINB & (1 << 0)) == 0)
 10a:	86 e3       	ldi	r24, 0x36	; 54
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	fc 01       	movw	r30, r24
 110:	80 81       	ld	r24, Z
 112:	88 2f       	mov	r24, r24
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	81 70       	andi	r24, 0x01	; 1
 118:	99 27       	eor	r25, r25
 11a:	89 2b       	or	r24, r25
 11c:	b1 f7       	brne	.-20     	; 0x10a <main+0x38>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	a0 ea       	ldi	r26, 0xA0	; 160
 124:	b2 e4       	ldi	r27, 0x42	; 66
 126:	89 83       	std	Y+1, r24	; 0x01
 128:	9a 83       	std	Y+2, r25	; 0x02
 12a:	ab 83       	std	Y+3, r26	; 0x03
 12c:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 12e:	26 e6       	ldi	r18, 0x66	; 102
 130:	36 e6       	ldi	r19, 0x66	; 102
 132:	46 e6       	ldi	r20, 0x66	; 102
 134:	55 e4       	ldi	r21, 0x45	; 69
 136:	69 81       	ldd	r22, Y+1	; 0x01
 138:	7a 81       	ldd	r23, Y+2	; 0x02
 13a:	8b 81       	ldd	r24, Y+3	; 0x03
 13c:	9c 81       	ldd	r25, Y+4	; 0x04
 13e:	0e 94 a0 01 	call	0x340	; 0x340 <__mulsf3>
 142:	dc 01       	movw	r26, r24
 144:	cb 01       	movw	r24, r22
 146:	8d 83       	std	Y+5, r24	; 0x05
 148:	9e 83       	std	Y+6, r25	; 0x06
 14a:	af 83       	std	Y+7, r26	; 0x07
 14c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	40 e8       	ldi	r20, 0x80	; 128
 154:	5f e3       	ldi	r21, 0x3F	; 63
 156:	6d 81       	ldd	r22, Y+5	; 0x05
 158:	7e 81       	ldd	r23, Y+6	; 0x06
 15a:	8f 81       	ldd	r24, Y+7	; 0x07
 15c:	98 85       	ldd	r25, Y+8	; 0x08
 15e:	0e 94 1a 01 	call	0x234	; 0x234 <__cmpsf2>
 162:	88 23       	and	r24, r24
 164:	2c f4       	brge	.+10     	; 0x170 <main+0x9e>
		__ticks = 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	9a 87       	std	Y+10, r25	; 0x0a
 16c:	89 87       	std	Y+9, r24	; 0x09
 16e:	3f c0       	rjmp	.+126    	; 0x1ee <main+0x11c>
	else if (__tmp > 65535)
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	3f ef       	ldi	r19, 0xFF	; 255
 174:	4f e7       	ldi	r20, 0x7F	; 127
 176:	57 e4       	ldi	r21, 0x47	; 71
 178:	6d 81       	ldd	r22, Y+5	; 0x05
 17a:	7e 81       	ldd	r23, Y+6	; 0x06
 17c:	8f 81       	ldd	r24, Y+7	; 0x07
 17e:	98 85       	ldd	r25, Y+8	; 0x08
 180:	0e 94 9b 01 	call	0x336	; 0x336 <__gesf2>
 184:	18 16       	cp	r1, r24
 186:	4c f5       	brge	.+82     	; 0x1da <main+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	40 e2       	ldi	r20, 0x20	; 32
 18e:	51 e4       	ldi	r21, 0x41	; 65
 190:	69 81       	ldd	r22, Y+1	; 0x01
 192:	7a 81       	ldd	r23, Y+2	; 0x02
 194:	8b 81       	ldd	r24, Y+3	; 0x03
 196:	9c 81       	ldd	r25, Y+4	; 0x04
 198:	0e 94 a0 01 	call	0x340	; 0x340 <__mulsf3>
 19c:	dc 01       	movw	r26, r24
 19e:	cb 01       	movw	r24, r22
 1a0:	bc 01       	movw	r22, r24
 1a2:	cd 01       	movw	r24, r26
 1a4:	0e 94 1f 01 	call	0x23e	; 0x23e <__fixunssfsi>
 1a8:	dc 01       	movw	r26, r24
 1aa:	cb 01       	movw	r24, r22
 1ac:	9a 87       	std	Y+10, r25	; 0x0a
 1ae:	89 87       	std	Y+9, r24	; 0x09
 1b0:	0f c0       	rjmp	.+30     	; 0x1d0 <main+0xfe>
 1b2:	80 e7       	ldi	r24, 0x70	; 112
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	9c 87       	std	Y+12, r25	; 0x0c
 1b8:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1ba:	8b 85       	ldd	r24, Y+11	; 0x0b
 1bc:	9c 85       	ldd	r25, Y+12	; 0x0c
 1be:	01 97       	sbiw	r24, 0x01	; 1
 1c0:	f1 f7       	brne	.-4      	; 0x1be <main+0xec>
 1c2:	9c 87       	std	Y+12, r25	; 0x0c
 1c4:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1c6:	89 85       	ldd	r24, Y+9	; 0x09
 1c8:	9a 85       	ldd	r25, Y+10	; 0x0a
 1ca:	01 97       	sbiw	r24, 0x01	; 1
 1cc:	9a 87       	std	Y+10, r25	; 0x0a
 1ce:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d0:	89 85       	ldd	r24, Y+9	; 0x09
 1d2:	9a 85       	ldd	r25, Y+10	; 0x0a
 1d4:	89 2b       	or	r24, r25
 1d6:	69 f7       	brne	.-38     	; 0x1b2 <main+0xe0>
 1d8:	14 c0       	rjmp	.+40     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1da:	6d 81       	ldd	r22, Y+5	; 0x05
 1dc:	7e 81       	ldd	r23, Y+6	; 0x06
 1de:	8f 81       	ldd	r24, Y+7	; 0x07
 1e0:	98 85       	ldd	r25, Y+8	; 0x08
 1e2:	0e 94 1f 01 	call	0x23e	; 0x23e <__fixunssfsi>
 1e6:	dc 01       	movw	r26, r24
 1e8:	cb 01       	movw	r24, r22
 1ea:	9a 87       	std	Y+10, r25	; 0x0a
 1ec:	89 87       	std	Y+9, r24	; 0x09
 1ee:	89 85       	ldd	r24, Y+9	; 0x09
 1f0:	9a 85       	ldd	r25, Y+10	; 0x0a
 1f2:	9e 87       	std	Y+14, r25	; 0x0e
 1f4:	8d 87       	std	Y+13, r24	; 0x0d
 1f6:	8d 85       	ldd	r24, Y+13	; 0x0d
 1f8:	9e 85       	ldd	r25, Y+14	; 0x0e
 1fa:	01 97       	sbiw	r24, 0x01	; 1
 1fc:	f1 f7       	brne	.-4      	; 0x1fa <main+0x128>
 1fe:	9e 87       	std	Y+14, r25	; 0x0e
 200:	8d 87       	std	Y+13, r24	; 0x0d
		{
			_delay_ms(80);
			if((PINB & (1 << 0)) == 0)
 202:	86 e3       	ldi	r24, 0x36	; 54
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	fc 01       	movw	r30, r24
 208:	80 81       	ld	r24, Z
 20a:	88 2f       	mov	r24, r24
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	81 70       	andi	r24, 0x01	; 1
 210:	99 27       	eor	r25, r25
 212:	89 2b       	or	r24, r25
 214:	09 f0       	breq	.+2      	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 216:	79 cf       	rjmp	.-270    	; 0x10a <main+0x38>
			{
				while((PINB & (1 << 0)) == 0);
 218:	00 00       	nop
 21a:	86 e3       	ldi	r24, 0x36	; 54
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	fc 01       	movw	r30, r24
 220:	80 81       	ld	r24, Z
 222:	88 2f       	mov	r24, r24
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	81 70       	andi	r24, 0x01	; 1
 228:	99 27       	eor	r25, r25
 22a:	89 2b       	or	r24, r25
 22c:	b1 f3       	breq	.-20     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
				toggle();
 22e:	0e 94 3e 00 	call	0x7c	; 0x7c <toggle>
			}
		}
    }
 232:	6b cf       	rjmp	.-298    	; 0x10a <main+0x38>

00000234 <__cmpsf2>:
 234:	0e 94 4e 01 	call	0x29c	; 0x29c <__fp_cmp>
 238:	08 f4       	brcc	.+2      	; 0x23c <__cmpsf2+0x8>
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	08 95       	ret

0000023e <__fixunssfsi>:
 23e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <__fp_splitA>
 242:	88 f0       	brcs	.+34     	; 0x266 <__fixunssfsi+0x28>
 244:	9f 57       	subi	r25, 0x7F	; 127
 246:	98 f0       	brcs	.+38     	; 0x26e <__fixunssfsi+0x30>
 248:	b9 2f       	mov	r27, r25
 24a:	99 27       	eor	r25, r25
 24c:	b7 51       	subi	r27, 0x17	; 23
 24e:	b0 f0       	brcs	.+44     	; 0x27c <__fixunssfsi+0x3e>
 250:	e1 f0       	breq	.+56     	; 0x28a <__fixunssfsi+0x4c>
 252:	66 0f       	add	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	88 1f       	adc	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	1a f0       	brmi	.+6      	; 0x262 <__fixunssfsi+0x24>
 25c:	ba 95       	dec	r27
 25e:	c9 f7       	brne	.-14     	; 0x252 <__fixunssfsi+0x14>
 260:	14 c0       	rjmp	.+40     	; 0x28a <__fixunssfsi+0x4c>
 262:	b1 30       	cpi	r27, 0x01	; 1
 264:	91 f0       	breq	.+36     	; 0x28a <__fixunssfsi+0x4c>
 266:	0e 94 94 01 	call	0x328	; 0x328 <__fp_zero>
 26a:	b1 e0       	ldi	r27, 0x01	; 1
 26c:	08 95       	ret
 26e:	0c 94 94 01 	jmp	0x328	; 0x328 <__fp_zero>
 272:	67 2f       	mov	r22, r23
 274:	78 2f       	mov	r23, r24
 276:	88 27       	eor	r24, r24
 278:	b8 5f       	subi	r27, 0xF8	; 248
 27a:	39 f0       	breq	.+14     	; 0x28a <__fixunssfsi+0x4c>
 27c:	b9 3f       	cpi	r27, 0xF9	; 249
 27e:	cc f3       	brlt	.-14     	; 0x272 <__fixunssfsi+0x34>
 280:	86 95       	lsr	r24
 282:	77 95       	ror	r23
 284:	67 95       	ror	r22
 286:	b3 95       	inc	r27
 288:	d9 f7       	brne	.-10     	; 0x280 <__fixunssfsi+0x42>
 28a:	3e f4       	brtc	.+14     	; 0x29a <__fixunssfsi+0x5c>
 28c:	90 95       	com	r25
 28e:	80 95       	com	r24
 290:	70 95       	com	r23
 292:	61 95       	neg	r22
 294:	7f 4f       	sbci	r23, 0xFF	; 255
 296:	8f 4f       	sbci	r24, 0xFF	; 255
 298:	9f 4f       	sbci	r25, 0xFF	; 255
 29a:	08 95       	ret

0000029c <__fp_cmp>:
 29c:	99 0f       	add	r25, r25
 29e:	00 08       	sbc	r0, r0
 2a0:	55 0f       	add	r21, r21
 2a2:	aa 0b       	sbc	r26, r26
 2a4:	e0 e8       	ldi	r30, 0x80	; 128
 2a6:	fe ef       	ldi	r31, 0xFE	; 254
 2a8:	16 16       	cp	r1, r22
 2aa:	17 06       	cpc	r1, r23
 2ac:	e8 07       	cpc	r30, r24
 2ae:	f9 07       	cpc	r31, r25
 2b0:	c0 f0       	brcs	.+48     	; 0x2e2 <__fp_cmp+0x46>
 2b2:	12 16       	cp	r1, r18
 2b4:	13 06       	cpc	r1, r19
 2b6:	e4 07       	cpc	r30, r20
 2b8:	f5 07       	cpc	r31, r21
 2ba:	98 f0       	brcs	.+38     	; 0x2e2 <__fp_cmp+0x46>
 2bc:	62 1b       	sub	r22, r18
 2be:	73 0b       	sbc	r23, r19
 2c0:	84 0b       	sbc	r24, r20
 2c2:	95 0b       	sbc	r25, r21
 2c4:	39 f4       	brne	.+14     	; 0x2d4 <__fp_cmp+0x38>
 2c6:	0a 26       	eor	r0, r26
 2c8:	61 f0       	breq	.+24     	; 0x2e2 <__fp_cmp+0x46>
 2ca:	23 2b       	or	r18, r19
 2cc:	24 2b       	or	r18, r20
 2ce:	25 2b       	or	r18, r21
 2d0:	21 f4       	brne	.+8      	; 0x2da <__fp_cmp+0x3e>
 2d2:	08 95       	ret
 2d4:	0a 26       	eor	r0, r26
 2d6:	09 f4       	brne	.+2      	; 0x2da <__fp_cmp+0x3e>
 2d8:	a1 40       	sbci	r26, 0x01	; 1
 2da:	a6 95       	lsr	r26
 2dc:	8f ef       	ldi	r24, 0xFF	; 255
 2de:	81 1d       	adc	r24, r1
 2e0:	81 1d       	adc	r24, r1
 2e2:	08 95       	ret

000002e4 <__fp_split3>:
 2e4:	57 fd       	sbrc	r21, 7
 2e6:	90 58       	subi	r25, 0x80	; 128
 2e8:	44 0f       	add	r20, r20
 2ea:	55 1f       	adc	r21, r21
 2ec:	59 f0       	breq	.+22     	; 0x304 <__fp_splitA+0x10>
 2ee:	5f 3f       	cpi	r21, 0xFF	; 255
 2f0:	71 f0       	breq	.+28     	; 0x30e <__fp_splitA+0x1a>
 2f2:	47 95       	ror	r20

000002f4 <__fp_splitA>:
 2f4:	88 0f       	add	r24, r24
 2f6:	97 fb       	bst	r25, 7
 2f8:	99 1f       	adc	r25, r25
 2fa:	61 f0       	breq	.+24     	; 0x314 <__fp_splitA+0x20>
 2fc:	9f 3f       	cpi	r25, 0xFF	; 255
 2fe:	79 f0       	breq	.+30     	; 0x31e <__fp_splitA+0x2a>
 300:	87 95       	ror	r24
 302:	08 95       	ret
 304:	12 16       	cp	r1, r18
 306:	13 06       	cpc	r1, r19
 308:	14 06       	cpc	r1, r20
 30a:	55 1f       	adc	r21, r21
 30c:	f2 cf       	rjmp	.-28     	; 0x2f2 <__fp_split3+0xe>
 30e:	46 95       	lsr	r20
 310:	f1 df       	rcall	.-30     	; 0x2f4 <__fp_splitA>
 312:	08 c0       	rjmp	.+16     	; 0x324 <__fp_splitA+0x30>
 314:	16 16       	cp	r1, r22
 316:	17 06       	cpc	r1, r23
 318:	18 06       	cpc	r1, r24
 31a:	99 1f       	adc	r25, r25
 31c:	f1 cf       	rjmp	.-30     	; 0x300 <__fp_splitA+0xc>
 31e:	86 95       	lsr	r24
 320:	71 05       	cpc	r23, r1
 322:	61 05       	cpc	r22, r1
 324:	08 94       	sec
 326:	08 95       	ret

00000328 <__fp_zero>:
 328:	e8 94       	clt

0000032a <__fp_szero>:
 32a:	bb 27       	eor	r27, r27
 32c:	66 27       	eor	r22, r22
 32e:	77 27       	eor	r23, r23
 330:	cb 01       	movw	r24, r22
 332:	97 f9       	bld	r25, 7
 334:	08 95       	ret

00000336 <__gesf2>:
 336:	0e 94 4e 01 	call	0x29c	; 0x29c <__fp_cmp>
 33a:	08 f4       	brcc	.+2      	; 0x33e <__gesf2+0x8>
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	08 95       	ret

00000340 <__mulsf3>:
 340:	0e 94 b3 01 	call	0x366	; 0x366 <__mulsf3x>
 344:	0c 94 24 02 	jmp	0x448	; 0x448 <__fp_round>
 348:	0e 94 16 02 	call	0x42c	; 0x42c <__fp_pscA>
 34c:	38 f0       	brcs	.+14     	; 0x35c <__mulsf3+0x1c>
 34e:	0e 94 1d 02 	call	0x43a	; 0x43a <__fp_pscB>
 352:	20 f0       	brcs	.+8      	; 0x35c <__mulsf3+0x1c>
 354:	95 23       	and	r25, r21
 356:	11 f0       	breq	.+4      	; 0x35c <__mulsf3+0x1c>
 358:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__fp_inf>
 35c:	0c 94 13 02 	jmp	0x426	; 0x426 <__fp_nan>
 360:	11 24       	eor	r1, r1
 362:	0c 94 95 01 	jmp	0x32a	; 0x32a <__fp_szero>

00000366 <__mulsf3x>:
 366:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__fp_split3>
 36a:	70 f3       	brcs	.-36     	; 0x348 <__mulsf3+0x8>

0000036c <__mulsf3_pse>:
 36c:	95 9f       	mul	r25, r21
 36e:	c1 f3       	breq	.-16     	; 0x360 <__mulsf3+0x20>
 370:	95 0f       	add	r25, r21
 372:	50 e0       	ldi	r21, 0x00	; 0
 374:	55 1f       	adc	r21, r21
 376:	62 9f       	mul	r22, r18
 378:	f0 01       	movw	r30, r0
 37a:	72 9f       	mul	r23, r18
 37c:	bb 27       	eor	r27, r27
 37e:	f0 0d       	add	r31, r0
 380:	b1 1d       	adc	r27, r1
 382:	63 9f       	mul	r22, r19
 384:	aa 27       	eor	r26, r26
 386:	f0 0d       	add	r31, r0
 388:	b1 1d       	adc	r27, r1
 38a:	aa 1f       	adc	r26, r26
 38c:	64 9f       	mul	r22, r20
 38e:	66 27       	eor	r22, r22
 390:	b0 0d       	add	r27, r0
 392:	a1 1d       	adc	r26, r1
 394:	66 1f       	adc	r22, r22
 396:	82 9f       	mul	r24, r18
 398:	22 27       	eor	r18, r18
 39a:	b0 0d       	add	r27, r0
 39c:	a1 1d       	adc	r26, r1
 39e:	62 1f       	adc	r22, r18
 3a0:	73 9f       	mul	r23, r19
 3a2:	b0 0d       	add	r27, r0
 3a4:	a1 1d       	adc	r26, r1
 3a6:	62 1f       	adc	r22, r18
 3a8:	83 9f       	mul	r24, r19
 3aa:	a0 0d       	add	r26, r0
 3ac:	61 1d       	adc	r22, r1
 3ae:	22 1f       	adc	r18, r18
 3b0:	74 9f       	mul	r23, r20
 3b2:	33 27       	eor	r19, r19
 3b4:	a0 0d       	add	r26, r0
 3b6:	61 1d       	adc	r22, r1
 3b8:	23 1f       	adc	r18, r19
 3ba:	84 9f       	mul	r24, r20
 3bc:	60 0d       	add	r22, r0
 3be:	21 1d       	adc	r18, r1
 3c0:	82 2f       	mov	r24, r18
 3c2:	76 2f       	mov	r23, r22
 3c4:	6a 2f       	mov	r22, r26
 3c6:	11 24       	eor	r1, r1
 3c8:	9f 57       	subi	r25, 0x7F	; 127
 3ca:	50 40       	sbci	r21, 0x00	; 0
 3cc:	9a f0       	brmi	.+38     	; 0x3f4 <__mulsf3_pse+0x88>
 3ce:	f1 f0       	breq	.+60     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
 3d0:	88 23       	and	r24, r24
 3d2:	4a f0       	brmi	.+18     	; 0x3e6 <__mulsf3_pse+0x7a>
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	bb 1f       	adc	r27, r27
 3da:	66 1f       	adc	r22, r22
 3dc:	77 1f       	adc	r23, r23
 3de:	88 1f       	adc	r24, r24
 3e0:	91 50       	subi	r25, 0x01	; 1
 3e2:	50 40       	sbci	r21, 0x00	; 0
 3e4:	a9 f7       	brne	.-22     	; 0x3d0 <__mulsf3_pse+0x64>
 3e6:	9e 3f       	cpi	r25, 0xFE	; 254
 3e8:	51 05       	cpc	r21, r1
 3ea:	80 f0       	brcs	.+32     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
 3ec:	0c 94 0d 02 	jmp	0x41a	; 0x41a <__fp_inf>
 3f0:	0c 94 95 01 	jmp	0x32a	; 0x32a <__fp_szero>
 3f4:	5f 3f       	cpi	r21, 0xFF	; 255
 3f6:	e4 f3       	brlt	.-8      	; 0x3f0 <__mulsf3_pse+0x84>
 3f8:	98 3e       	cpi	r25, 0xE8	; 232
 3fa:	d4 f3       	brlt	.-12     	; 0x3f0 <__mulsf3_pse+0x84>
 3fc:	86 95       	lsr	r24
 3fe:	77 95       	ror	r23
 400:	67 95       	ror	r22
 402:	b7 95       	ror	r27
 404:	f7 95       	ror	r31
 406:	e7 95       	ror	r30
 408:	9f 5f       	subi	r25, 0xFF	; 255
 40a:	c1 f7       	brne	.-16     	; 0x3fc <__mulsf3_pse+0x90>
 40c:	fe 2b       	or	r31, r30
 40e:	88 0f       	add	r24, r24
 410:	91 1d       	adc	r25, r1
 412:	96 95       	lsr	r25
 414:	87 95       	ror	r24
 416:	97 f9       	bld	r25, 7
 418:	08 95       	ret

0000041a <__fp_inf>:
 41a:	97 f9       	bld	r25, 7
 41c:	9f 67       	ori	r25, 0x7F	; 127
 41e:	80 e8       	ldi	r24, 0x80	; 128
 420:	70 e0       	ldi	r23, 0x00	; 0
 422:	60 e0       	ldi	r22, 0x00	; 0
 424:	08 95       	ret

00000426 <__fp_nan>:
 426:	9f ef       	ldi	r25, 0xFF	; 255
 428:	80 ec       	ldi	r24, 0xC0	; 192
 42a:	08 95       	ret

0000042c <__fp_pscA>:
 42c:	00 24       	eor	r0, r0
 42e:	0a 94       	dec	r0
 430:	16 16       	cp	r1, r22
 432:	17 06       	cpc	r1, r23
 434:	18 06       	cpc	r1, r24
 436:	09 06       	cpc	r0, r25
 438:	08 95       	ret

0000043a <__fp_pscB>:
 43a:	00 24       	eor	r0, r0
 43c:	0a 94       	dec	r0
 43e:	12 16       	cp	r1, r18
 440:	13 06       	cpc	r1, r19
 442:	14 06       	cpc	r1, r20
 444:	05 06       	cpc	r0, r21
 446:	08 95       	ret

00000448 <__fp_round>:
 448:	09 2e       	mov	r0, r25
 44a:	03 94       	inc	r0
 44c:	00 0c       	add	r0, r0
 44e:	11 f4       	brne	.+4      	; 0x454 <__fp_round+0xc>
 450:	88 23       	and	r24, r24
 452:	52 f0       	brmi	.+20     	; 0x468 <__stack+0x9>
 454:	bb 0f       	add	r27, r27
 456:	40 f4       	brcc	.+16     	; 0x468 <__stack+0x9>
 458:	bf 2b       	or	r27, r31
 45a:	11 f4       	brne	.+4      	; 0x460 <__stack+0x1>
 45c:	60 ff       	sbrs	r22, 0
 45e:	04 c0       	rjmp	.+8      	; 0x468 <__stack+0x9>
 460:	6f 5f       	subi	r22, 0xFF	; 255
 462:	7f 4f       	sbci	r23, 0xFF	; 255
 464:	8f 4f       	sbci	r24, 0xFF	; 255
 466:	9f 4f       	sbci	r25, 0xFF	; 255
 468:	08 95       	ret

0000046a <_exit>:
 46a:	f8 94       	cli

0000046c <__stop_program>:
 46c:	ff cf       	rjmp	.-2      	; 0x46c <__stop_program>
